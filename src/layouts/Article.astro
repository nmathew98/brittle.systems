---
import Base from "./Base.astro";
import { SEO } from "astro-seo";
import { evaluate } from "@mdx-js/mdx";
import { readFile } from "node:fs/promises";

interface Article extends Awaited<ReturnType<typeof evaluate>> {
	tags?: string[] | string;
	published?: Date;
	modified?: Date;
}

const { file, frontmatter } = Astro.props;

const raw = await readFile(file);

// Since we're mocking the runtime to just obtain metadata exports
// we need to strip out custom components, this also means any custom component
// used has to be a native element substitute
const importsStripped = raw
	.toString()
	.replaceAll(/import .*|export const components .*/gi, "");
const mocked = new Proxy(Object.create(null), {
	get: () => () => {},
});
const article: Article = await evaluate(importsStripped, mocked);

const getArticleTags = () => {
	if (
		article.tags &&
		(Array.isArray(article.tags) || typeof article.tags === "string")
	) {
		if (Array.isArray(article.tags)) {
			return article.tags;
		}

		return article.tags.split(", ");
	}

	return frontmatter.tags.split(", ");
};

const publishedTime =
	article.published instanceof Date
		? article.published.toISOString()
		: undefined;
const modifiedTime =
	article.modified instanceof Date
		? article.modified.toISOString()
		: undefined;
const tags = getArticleTags();
---

<Base>
	<SEO
		title={`${frontmatter.title} | brittle.systems`}
		description={frontmatter.description}
		openGraph={{
			basic: {
				title: frontmatter.title,
				type: "article",
				// TODO: Same as favicon
				image: "",
			},
			optional: {
				description: frontmatter.description,
			},
			article: {
				authors: [frontmatter.author],
				publishedTime: publishedTime,
				modifiedTime: modifiedTime,
				section: frontmatter.section,
				tags: tags,
			},
		}}
		slot="head"
	/>
	<body>
		<div
			class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 my-8 flex flex-col lg:grid lg:justify-center lg:grid-cols-6">
			<!-- Activates for < lg -->
			<div class="block lg:hidden mb-16">
				<h1 class="text-white text-5xl font-bold break-words">
					{frontmatter.title}
				</h1>
				<h3 class="text-white text-lg font-normal break-words">
					{frontmatter.description}
				</h3>
			</div>
			<!-- Only activates for large screen sizes -->
			<div
				class="hidden lg:flex lg:col-span-2 lg:flex-col lg:space-y-20 lg:max-w-sm justify-between">
				<div>
					<h1 class="text-white text-5xl font-bold break-words">
						{frontmatter.title}
					</h1>
					<h3 class="text-white text-lg font-normal break-words">
						{frontmatter.description}
					</h3>
				</div>
				<div class="flex flex-col">
					<span class="text-white font-medium break-words">
						By: {frontmatter.author}
					</span>
					<span class="text-white font-medium break-words">
						Published: {new Date(publishedTime).toDateString()}
					</span>
					<span class="text-white font-medium break-words">
						Updated: {new Date(publishedTime).toDateString()}
					</span>
					<div class="mt-8">
						<span class="text-white font-light">Tags</span>
						{
							!!tags && (
								<div class="flex space-x-1 text-white font-light">
									{tags.map((tag: string) => (
										<span>#{tag}</span>
									))}
								</div>
							)
						}
					</div>
				</div>
			</div>
			<article
				class="col-span-4 prose prose-invert prose-slate
					prose-headings:italic
					prose-p:font-serif prose-li:font-serif
					prose-base md:prose-lg lg:prose-2xl">
				<slot />
			</article>
			<!-- Activates for < lg -->
			<div class="block lg:hidden mt-16">
				<div
					class="flex flex-col text-orange-50 font-serif text-md break-words">
					<span>
						{frontmatter.author}
					</span>
					<span>
						{new Date(publishedTime).toDateString()}
					</span>
				</div>
			</div>
		</div>
	</body>
</Base>

<style>
	body {
		@apply bg-slate-950;
	}
</style>
