name: Deploy services

on:
  push:
    branches: [master, staging, dev]
  workflow_dispatch:

env:
  BRANCH_NAME: ${{ github.base_ref || github.ref_name }}

jobs:
  up:
    if: contains(vars.UP, github.base_ref || github.ref_name)
    permissions:
      contents: read
      id-token: write

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Configure GCP credentials
        id: auth
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: "Install dependencies: infrastructure"
        run: go mod download
        working-directory: infrastructure
        
      - name: "Deploy stack: skulpture/brittle-systems"
        uses: pulumi/actions@v5
        with:
          command: up
          stack-name: "skulpture/brittle-systems/statamic"
          comment-on-pr: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          work-dir: "infrastructure"
          upsert: true
          suppress-outputs: true
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          COMPUTE_INSTANCE_NAME: "brittle-systems"
          CLOUDFLARE_ZONE_ID: ${{ vars.CLOUDFLARE_ZONE_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          DO_SSH_PUBLIC_KEY: ${{ vars.DO_SSH_PUBLIC_KEY }}
          DIGITALOCEAN_TOKEN: ${{ vars.DIGITALOCEAN_TOKEN }}

  deploy:    
    permissions:
      contents: read
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        service: [statamic]
        branch: [master] # staging, dev

    environment: "brittle-systems-${{ matrix.branch }}"

    needs: [up]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Copy files to DO (${{ matrix.branch }})
        uses: appleboy/scp-action@master
        # if: env.BRANCH_NAME == matrix.branch
        with:
          host: ${{ secrets.DO_VM_HOST }}
          username: ${{ secrets.DO_VM_USERNAME }}
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.DO_SSH_PASSPHRASE }}
          port: 22
          overwrite: true
          source: "./*"
          target: "./brittle-systems-${{ env.BRANCH_NAME }}"

      - name: Deploy brittle-systems (${{ matrix.branch }})
        uses: appleboy/ssh-action@master
        if: contains(vars.DEPLOY, env.BRANCH_NAME)
        env:
          STACK_NAME: ${{ matrix.service }}
          SERVICES_DOCKER_COMPOSE_FILE: docker-compose.yml
          PROXY_DOCKER_COMPOSE_FILE: docker-compose.proxy.yml
          ENV_FILE: ~/.env
        with:
          host: ${{ secrets.DO_VM_HOST }}
          username: ${{ secrets.DO_VM_USERNAME }}
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.DO_SSH_PASSPHRASE }}
          port: 22
          script: |
            # TODO: pull latest
            export $(docker run --rm --env-file ${{ env.ENV_FILE }} skulpture/kryptos:staging cat | xargs)
            
            if [[ "${{ env.BRANCH_NAME }}" != "master" ]]; then
              export TAG=${{ env.BRANCH_NAME }}
            fi

            cd landing-${{ env.BRANCH_NAME }}/${{ matrix.service }}

            docker stack deploy --compose-file ${{ env.SERVICES_DOCKER_COMPOSE_FILE }} ${{ env.STACK_NAME }} --detach=false
            docker service update ${{ env.STACK_NAME }}_proxy --force
            docker stack deploy --compose-file ${{ env.PROXY_DOCKER_COMPOSE_FILE }} ${{ env.STACK_NAME }} --detach=false
            docker system prune -af
